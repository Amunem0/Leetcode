class Solution {
public:
    bool solve(vector<int>&nums,int target,int n,vector<vector<int>>&dp){
        if(target==0){
            return true;
        }
        if(n==0){
            return false;
        }
        if(nums[n-1]>target){
            return dp[n-1][target]=solve(nums,target,n-1,dp);
        }
        if(dp[n-1][target]!=-1){
            return dp[n-1][target];
        }
        return dp[n-1][target]=solve(nums,target-nums[n-1],n-1,dp)||solve(nums,target,n-1,dp);
        
    }
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto i:nums){
            sum+=i;
        }
        if(sum%2!=0){
            return false;
        }
        int n=nums.size();
        int target=sum/2;
        vector<vector<int>>dp(n+1,vector<int>(target+1,-1));
        return solve(nums,target,n,dp);
    }
};
