/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    int maxi(vector<int>& levels) {
        int maximum = INT_MIN;
        for (int i = 0; i < levels.size(); i++) {
            maximum = max(maximum, levels[i]);
        }
        return maximum;
    }
    vector<int> largestValues(TreeNode* root) {
        queue<TreeNode*> q;
        vector<int> ans;
        if (root == NULL) {
            return {};
        }
        q.push(root);

        while (!q.empty()) {
            int n = q.size();
            vector<int> levels;
            for (int i = 0; i < n; i++) {
                auto node = q.front();
                q.pop();

                levels.push_back(node->val);
                if (node->left != NULL) {
                    q.push(node->left);
                }
                if (node->right != NULL) {
                    q.push(node->right);
                }
            }
            int maxiAtLevels = maxi(levels);
            ans.push_back(maxiAtLevels);
        }
        return ans;
    }
};
